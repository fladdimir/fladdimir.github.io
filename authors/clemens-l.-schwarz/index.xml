<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clemens L. Schwarz | Wladimir Hofmann | Homepage</title>
    <link>/authors/clemens-l.-schwarz/</link>
      <atom:link href="/authors/clemens-l.-schwarz/index.xml" rel="self" type="application/rss+xml" />
    <description>Clemens L. Schwarz</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 28 Oct 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Clemens L. Schwarz</title>
      <link>/authors/clemens-l.-schwarz/</link>
    </image>
    
    <item>
      <title>Towards the Productive Application of Reinforcement Learning in Logistics: A Case Study on Assembly Line Material Provision Planning</title>
      <link>/publication/esm2021/</link>
      <pubDate>Thu, 28 Oct 2021 00:00:00 +0000</pubDate>
      <guid>/publication/esm2021/</guid>
      <description>&lt;p&gt;Presented at: The 35th annual European Simulation and Modelling Conference, ESM&amp;rsquo;2021, Rome, Italy&lt;/p&gt;
&lt;p&gt;Full text 
&lt;a href=&#34;https://www.researchgate.net/publication/355717138_Towards_the_Productive_Application_of_Reinforcement_Learning_in_Logistics_A_Case_Study_on_Assembly_Line_Material_Provision_Planning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on researchgate&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Digital Twin for Assembly Line Material Provisioning Planning</title>
      <link>/post/tugger-routing/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/post/tugger-routing/</guid>
      <description>&lt;p&gt;Reinforcement learning represents an emerging technique from machine learning.
It can autonomously derive complex action sequences in dynamic environments and is successfully applied in various fields, e.g. from 
&lt;a href=&#34;https://openai.com/blog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;robotics and gaming&lt;/a&gt;.
Instead of explicitly defining a specific solution strategy for a problem, we can just provide an &lt;em&gt;environment&lt;/em&gt;. A self-learning &lt;em&gt;agent&lt;/em&gt; will then autonomously discover successful strategies just by interaction.&lt;/p&gt;
&lt;p&gt;Needless to say, there is nothing new under the moon and 
&lt;a href=&#34;https://www.researchgate.net/publication/326039529_Optimization_of_global_production_scheduling_with_deep_reinforcement_learning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous studies&lt;/a&gt; show the general feasibility of using RL for solving production-logistics problems.&lt;/p&gt;
&lt;p&gt;So why do we think that there is the need for yet another article about this very topic?&lt;/p&gt;
&lt;p&gt;First, there is a lot of active development in &lt;em&gt;RL&lt;/em&gt;, as well as in the application of &lt;em&gt;Digital Twins&lt;/em&gt; in production/logistics.
We believe that there lies even more potential in integrating these concepts.
Furthermore, we found the often derogatory-treated &lt;em&gt;&amp;ldquo;low-level implementation work&amp;rdquo;&lt;/em&gt; to be an actual obstacle for making progress in this challenging and highly inter-disciplinary area of applied research.
This contribution strives to show a working example based on a tool-stack which seamlessly integrates two of the most popular open-source software packages from their respective areas:

&lt;a href=&#34;https://stable-baselines.readthedocs.io/en/master/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stable-baselines&lt;/a&gt; for &lt;em&gt;RL&lt;/em&gt; and 
&lt;a href=&#34;https://simpy.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SimPy&lt;/a&gt; for implementing &lt;em&gt;Digital Twins&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Get the repo:
&lt;a href=&#34;https://github.com/fladdimir/tugger-routing&#34;&gt;https://github.com/fladdimir/tugger-routing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- omit in toc --&gt;
&lt;h2 id=&#34;outline&#34;&gt;Outline&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#outline&#34;&gt;Outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#introduction--basics&#34;&gt;Introduction &amp;amp; Basics&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#reinforcement-learning&#34;&gt;Reinforcement Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#digital-twins-and-discrete-event-simulation&#34;&gt;Digital Twins and Discrete Event Simulation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#casymda-package&#34;&gt;Casymda-Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#wrapping-a-des-model-in-a-gym-environment&#34;&gt;Wrapping a DES-Model in a Gym-Environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#case-study&#34;&gt;Case-Study&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#scenario&#34;&gt;Scenario&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#simulation-model&#34;&gt;Simulation Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#preparing-the-gym-environment&#34;&gt;Preparing the Gym-Environment&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#observation---action-space&#34;&gt;Observation- &amp;amp; Action-Space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#rewards&#34;&gt;Rewards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#rl-agent-training--evaluation&#34;&gt;RL-Agent Training &amp;amp; Evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#performance-comparison&#34;&gt;Performance Comparison&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#summing-up&#34;&gt;Summing Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction--basics&#34;&gt;Introduction &amp;amp; Basics&lt;/h2&gt;
&lt;h3 id=&#34;reinforcement-learning&#34;&gt;Reinforcement Learning&lt;/h3&gt;
&lt;p&gt;If you still ask yourself what RL is capable of, we definitely recommend to have a look at 
&lt;a href=&#34;https://openai.com/blog/emergent-tool-use/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;what the guys from openai are doing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Admittedly, thats probably a quite sophisticated and highly engineered example, but it breaks down to a simple interaction between an &lt;em&gt;agent&lt;/em&gt; and an &lt;em&gt;environment&lt;/em&gt;.
Technically, this interaction is defined by an interface (or abstract base-class as Python likes to put it), which is part of the 
&lt;a href=&#34;https://gym.openai.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gym-package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The graphic below illustrates the exchange of information between agent and environment.
First, the agent calls the environment&amp;rsquo;s &lt;em&gt;step&lt;/em&gt; method, providing the action to be executed.
The environment then processes the action and returns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the new state of the system (&lt;em&gt;observation&lt;/em&gt;),&lt;/li&gt;
&lt;li&gt;the &lt;em&gt;reward&lt;/em&gt; which occured during the step (might be zero),&lt;/li&gt;
&lt;li&gt;a &lt;em&gt;done&lt;/em&gt; value potentially indicating the end of an episode (and the need for a subsequent &lt;em&gt;reset&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;and an &lt;em&gt;info&lt;/em&gt;-object (might contain additional information e.g. for logging purposes).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;diagrams/gym_rl_environment_interface.jpg&#34; alt=&#34;Gym-RL-Environment-Interface&#34;&gt;&lt;/p&gt;
&lt;p&gt;The interface also prescribes more, such as the formats of &lt;em&gt;action-space&lt;/em&gt; and &lt;em&gt;observation_space&lt;/em&gt;, as well as &lt;em&gt;render&lt;/em&gt; and &lt;em&gt;reset&lt;/em&gt; behavior.&lt;br&gt;
The various RL algorithms provided by the 
&lt;a href=&#34;https://pypi.org/project/stable-baselines/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stable-baselines&lt;/a&gt;-package are ready to work with environments implementing this gym-interface.
All that is left to do is creating a compliant environment - and in the next section we will show how this can be achieved in the domain of logistics.&lt;/p&gt;
&lt;h3 id=&#34;digital-twins-and-discrete-event-simulation&#34;&gt;Digital Twins and Discrete Event Simulation&lt;/h3&gt;
&lt;p&gt;Frankly, &lt;em&gt;Digital Twin&lt;/em&gt; is probably the most overused buzzword of all the &amp;ldquo;Lostistics 4.0 / Industry 4.0&amp;rdquo; stuff that is out there.
Even though we could not resist to put it into the title, from now on we&amp;rsquo;ll prove that we can do better and use the more specific term &amp;ldquo;Discrete Event Simulation&amp;rdquo; (DES).&lt;/p&gt;
&lt;p&gt;Why DES? Discrete Event Simulation is one of the widespread tools for analysis and design of logistics systems.
Today&amp;rsquo;s applications go beyond the traditional usage for systems planning.
They include more operational use-cases such as virtual commissioning or short-term forecasts.
Simulation models are getting integrated tightly into other IT-systems.
This allows to increase process transparency and to improve our means to analyze, control, and optimize system performance in real-time.
Doesn&amp;rsquo;t this sound pretty close to what &lt;em&gt;Digital Twins&lt;/em&gt; always promise?&lt;/p&gt;
&lt;p&gt;Most industrial simulation uses are still based on commercial packages.&lt;br&gt;
However, there are a couple of open-source alternatives, which are typically closer to general-purpose language programming. Even though they tend to lack some convenient commercial features, there are upsides such as better scalability and simplified interfacing.&lt;/p&gt;
&lt;p&gt;Related to Python we became aware of two popular DES packages: 
&lt;a href=&#34;https://www.salabim.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Salabim&lt;/a&gt; and 
&lt;a href=&#34;https://simpy.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SimPy&lt;/a&gt;.
Both are not only free and open-source, but even built on top of the standard library of one of the world&amp;rsquo;s most popular programming languages - let&amp;rsquo;s see what we can get out of that!&lt;/p&gt;
&lt;!-- omit in toc --&gt;
&lt;h4 id=&#34;casymda-package&#34;&gt;Casymda-Package&lt;/h4&gt;
&lt;p&gt;Based on &lt;em&gt;SimPy&lt;/em&gt;, we added bits of complementing functionality to gain some of the modeling convenience of commercial &amp;ldquo;block-based&amp;rdquo; DES-packages.&lt;br&gt;

&lt;a href=&#34;https://pypi.org/project/casymda/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Casymda&lt;/em&gt;&lt;/a&gt; facilitates the usage of bpmn-process-descriptions to generate corresponding simulation-model python-code.
.bpmn-files (basically xml) can easily be created with the 
&lt;a href=&#34;http://www.bpmn.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Camunda-Modeler&lt;/a&gt;.&lt;br&gt;
This graphical modeling helps to maintain an overview of the high-level model-structure.
Generated Casymda-models also include a generic, token-like animation of simulated processes out-of-the-box, ready to be run in a web-browser.
For presentation and debugging, animations can be paused and their speed can be changed dynamically.
Solely animation-related events are not scheduled if the simulation is run without visualization.
This maximizes the execution speed - which becomes especially important related to RL, when a high number of runs is necessary.&lt;br&gt;
Further features of Casymda include simulated movements along shortest paths in a 2D-tilemap-space, and gradual typing for development convenience (checkout 
&lt;a href=&#34;https://github.com/microsoft/pyright&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pyright&lt;/a&gt; if you are using 
&lt;a href=&#34;https://code.visualstudio.com/docs/python/editing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vscode&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For more info on &lt;em&gt;Casymda&lt;/em&gt; have a look at 
&lt;a href=&#34;https://github.com/fladdimir/casymda&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the repo&lt;/a&gt; or 
&lt;a href=&#34;https://casymda.github.io/page/Webpage/Startpage.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the (German) website&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;wrapping-a-des-model-in-a-gym-environment&#34;&gt;Wrapping a DES-Model in a Gym-Environment&lt;/h3&gt;
&lt;p&gt;To be able to train an RL-agent inside a simulation model, we need to make the model implementing the Gym-interface described above.&lt;/p&gt;
&lt;p&gt;The following diagram illustrates the coupling concept:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;diagrams/sim_env_wrapper.jpg&#34; alt=&#34;Gym-environment wrapper for a simulation model&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;step&lt;/code&gt; function of the Gym-Environment is called (&lt;code&gt;1&lt;/code&gt;), the provided action is propagated to the relevant block of the simulation model (&lt;code&gt;1.1&lt;/code&gt;).
This is realized with help of an &lt;code&gt;ActionHolder&lt;/code&gt;, so that a consuming piece of decision logic can dispatch according to the received information.&lt;/p&gt;
&lt;p&gt;Subsequently, the simulation is executed until a &lt;code&gt;next_action_needed&lt;/code&gt;-Event is triggered by the simulation model (&lt;code&gt;1.2&lt;/code&gt;).
This is indicating the end of the current step and the need for another action of the agent.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One &lt;em&gt;Gym-step&lt;/em&gt; can thus comprise an arbitrary number of discrete &lt;em&gt;SimPy-steps&lt;/em&gt;, each of which can in turn take an arbitrary amount of simulated time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rewards are managed with help of a &lt;code&gt;RewardHolder&lt;/code&gt; object, which is wired into the relevant blocks of the simulation model during environment initialization.
At the end of each step, occured rewards are collected (&lt;code&gt;1.3&lt;/code&gt;). Depending on the type of the optimization problem to solve, a post-processing of collected rewards can be applied (e.g. taking into account the amount elapsed time, so that an agent can learn time-efficient behavior).&lt;/p&gt;
&lt;p&gt;To check whether an episode ended (the &lt;em&gt;done&lt;/em&gt; part of the returned information), the current state of the model is checked against configured &lt;code&gt;done_criteria&lt;/code&gt; (&lt;code&gt;1.4&lt;/code&gt;).
These can contain e.g. some goals to be reached or a certain amount of time to be simulated.&lt;/p&gt;
&lt;p&gt;To provide the agent with an observation, a model-specific &lt;code&gt;ModelStateToObservationConverter&lt;/code&gt; is used to collect relevant information from the model.
The created observation conforms to the defined &lt;code&gt;observation_space&lt;/code&gt; (&lt;code&gt;1.5&lt;/code&gt;).
This step could include e.g. counting the number of entities in different queues or checking inventory levels and creating a NumPy-array out of this information.&lt;/p&gt;
&lt;p&gt;Finally, collected information is returned to the agent (&lt;code&gt;2&lt;/code&gt;), which can learn based on the reward and decide for the next action.&lt;/p&gt;
&lt;p&gt;Having the basics covered, let&amp;rsquo;s see how we get this to work.&lt;/p&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case-Study&lt;/h2&gt;
&lt;p&gt;Back in August of last year at the MIM2019 in Berlin, we had the chance to attend an interesting talk of two Bavarian guys presenting their research on 
&lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S2405896319315010&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;improving the tour-building for in-plant milk-run systems&lt;/a&gt;.
These internal deliveries are commonly used for assembly line supply, and the tours are typically following a very rigid plan.
Given the fact that the actual demand at the line tends to vary, their research revealed quite a lot of potential to decrease delivery lead times and to increase systems&amp;rsquo; utilization - just by making the tour-planning more dynamic.&lt;/p&gt;
&lt;p&gt;Based on this setting we constructed an abstracted and simplified version of an assembly line with a corresponding material supply system to provide a playground for reinforcement learning algorithms.&lt;/p&gt;
&lt;h3 id=&#34;scenario&#34;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;The image below shows a schematic layout plan of the system:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/layout_50perc.png&#34; alt=&#34;case-study-layout&#34;&gt;&lt;/p&gt;
&lt;p&gt;Unfinished products enter the system on the upper right (&lt;code&gt;I&lt;/code&gt;) and are assembled sequentially at 9 different stations, arranged in U-shape (&lt;code&gt;I-IX&lt;/code&gt;).
Finished products leave the system after the last assembly step (&lt;code&gt;IX&lt;/code&gt;).&lt;br&gt;
Stations require a certain amount of resource of either type &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; to be present in the station&amp;rsquo;s inventory before an assembly step can start.&lt;br&gt;
Each station can only hold one product at a time, and finished products can only be forwarded once the following station is empty (thus multiple upstream stations holding already finished products may be blocked by downstream stations which are still processing a product or waiting for material before being able to start processing).&lt;br&gt;
Material is supplied by a tugger, able to carry a limited discrete amount (&amp;ldquo;boxes&amp;rdquo;). The tugger can load material at a stock (&lt;code&gt;A&lt;/code&gt; and/or &lt;code&gt;B&lt;/code&gt;, located at the bottom).
1 discrete unit of material (&amp;ldquo;box&amp;rdquo;) can be loaded/unloaded at a time.
The goal of the assembly line is achieving the maximal throughput, which also correlates with small lead-times of products.&lt;/p&gt;
&lt;p&gt;Assumptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;material can only be loaded at the stocks (&lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;), each of which holds an infinite amount of material, so that the tugger never waits for material at a loading site&lt;/li&gt;
&lt;li&gt;material can only be unloaded at a station actually requiring this type of material (hence a tugger cannot unload a box of &lt;code&gt;A&lt;/code&gt; at a station which needs &lt;code&gt;B&lt;/code&gt; for assembly)&lt;/li&gt;
&lt;li&gt;the inventory capacity at the stations (&lt;code&gt;I-IX&lt;/code&gt;) is infinite, so that the tugger never waits at an unloading site (otherwise livelocks could occur where a tugger cannot unload material wherever it moves)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;System parameters&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Takt-time: processing time per station per product&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;60s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Demand per product of stations type &lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1.5 units&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Demand per product of stations type &lt;code&gt;B&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.5 units&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Tugger movement speed&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;10 m/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Tugger capacity&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25 units&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Amount of material (un-)loaded per step&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5 units&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Time needed per (un-)loading step&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Distances between stocks and stations (higher demands cause more frequent tours):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Relation&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Simple&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Demand-weighted&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A -&amp;gt; T1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1096.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1644.60m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B -&amp;gt; T2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;926.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;463.20m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A -&amp;gt; T3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;736.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1104.60m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B -&amp;gt; T4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;566.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;283.20m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A -&amp;gt; T5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;234.10m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;351.15m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B -&amp;gt; T6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;556.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;278.20m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A -&amp;gt; T7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;726.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1089.60m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;B -&amp;gt; T8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;916.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;458.20m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;A -&amp;gt; T9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1086.40m&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1629.60m&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The table below shows a simple throughput estimation by calculating the average cycle time of the tugger and the expected station utilization.
The estimation assumes &amp;ldquo;full truck loads&amp;rdquo;, always completely loading at one stock (either &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt;), and fully unloading at a station (&lt;code&gt;T1&lt;/code&gt; - &lt;code&gt;T9&lt;/code&gt;).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Throughput estimation&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Max throughput 24h&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;60/h x 24h = 1440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Demand / product&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.5 units&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Demand / time&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;9.5 / 60s = 0.16/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Average weighted distance&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;811.37m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Average driving time&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;81.137s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(Un-)loading time 25 units&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Average cycle time&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;(81.137s + 25s) x 2 = 212.274s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Delivered units / cycle&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Delivered units / time&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.12/s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Average utilization&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.12/s / 0.16/s = 75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Expected throughput per min&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;75% x 60/min = 45/min&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Expected throughput per 24h&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;~1080/24h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we can see, the delivery performance of the tugger represents the limiting factor (bottleneck) of the system, which means that each improvement made here will be directly reflected by a corresponding increase in the overall throughput.&lt;br&gt;
For the sake of simplicity, no stochastic model behaviour (such as e.g. randomly distributed loading or movement times) is assumed, hence the simulation model will be deterministic.&lt;br&gt;
As stated: the system as a whole is quite abstracted and simplified - but still capturing at least some of the basic complexity inherent to real-world problems.
Will our RL-agent be able to&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;grasp the underlying mechanics?&lt;/li&gt;
&lt;li&gt;distinguish different product types?&lt;/li&gt;
&lt;li&gt;discover the spots of demand and supply?&lt;/li&gt;
&lt;li&gt;deal with the limits of the tugger&amp;rsquo;s capacity?&lt;/li&gt;
&lt;li&gt;reach the maximal possible throughput?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll find out, but let&amp;rsquo;s first have a look at what the learning environment will look like.&lt;/p&gt;
&lt;h3 id=&#34;simulation-model&#34;&gt;Simulation Model&lt;/h3&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://github.com/fladdimir/tugger-routing/tree/github/tugger_src/gym_env/des_model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simulation model&lt;/a&gt; of the system basically consists of 2 processes, both depicted in the graphic below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/model.jpeg&#34; alt=&#34;case-study-processes&#34;&gt;&lt;/p&gt;
&lt;p&gt;On the left side, products pass through the 9 assembly steps (&lt;code&gt;ProductStation&lt;/code&gt;, rotated U-shape) before leaving the system, occasionally being blocked by downstream stations or waiting for material at a station.&lt;/p&gt;
&lt;p&gt;On the right side the tugger passes through an infinite cycle of movement and loading/unloading process steps (after initial creation at location &lt;code&gt;A&lt;/code&gt; by a &lt;code&gt;TuggerSource&lt;/code&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the next movement target is chosen and the movement is completed (no actual movement if the next target equals the current location) (&lt;code&gt;TuggerMovement&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Depending on the current location (being either a stock &lt;code&gt;A&lt;/code&gt;/&lt;code&gt;B&lt;/code&gt;) or a &lt;code&gt;ProductStation&lt;/code&gt;, the next tugger process step is chosen:
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TuggerStock A&lt;/code&gt; loading of one unit of &lt;code&gt;A&lt;/code&gt; (if tugger-capacity not reached)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TuggerStock B&lt;/code&gt; loading of one unit of &lt;code&gt;B&lt;/code&gt; (if tugger-capacity not reached)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TuggerStation&lt;/code&gt; unloading of one unit of &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; if possible (material required by station is loaded)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that even unsuccessful loading or unloading attempts are implemented to take a small, fixed amount of time, so that every possible Gym-step is guaranteed to take at least some simulated time (and a time-constrained episode is guaranteed to reach its end eventually).&lt;/p&gt;
&lt;p&gt;Below you can see a process animation, as well as an animation of a tilemap.
The agent here follows an explicitly defined simple rule of always delivering a complete load of 25 units to the station with the lowest inventory level.
To run the animation just clone the 
&lt;a href=&#34;https://github.com/fladdimir/tugger-routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo&lt;/a&gt;, run the command, and visit &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Process animation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up web-animation-lia-process
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;gifs/lia_process.gif&#34; alt=&#34;lia-process&#34;&gt;&lt;/p&gt;
&lt;p&gt;Tilemap animation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up web-animation-lia
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;gifs/lia_tilemap.gif&#34; alt=&#34;lia-tilemap&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;preparing-the-gym-environment&#34;&gt;Preparing the Gym-Environment&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;TuggerEnv&lt;/code&gt; implements the Gym-Env interface and wraps the simulation model to be used for RL-agent training.&lt;/p&gt;
&lt;p&gt;Generic functionalities like the mandatory &lt;code&gt;step&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; functions and related helper methods are inherited and abstract/default parent-methods are overridden in a model-specific way as required (&lt;em&gt;Template-Method Pattern&lt;/em&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;initialize_action_and_reward_holder&lt;/code&gt; specifies which model blocks&amp;hellip;
&lt;ul&gt;
&lt;li&gt;need access to gym-actions: &lt;code&gt;TilemapMovement&lt;/code&gt;, choosing the next movement target based on the supplied target index number&lt;/li&gt;
&lt;li&gt;log achieved rewards: &lt;code&gt;ProductSink&lt;/code&gt;, simply counting a reward of 1 for each finished product&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_reward&lt;/code&gt; specifies how the elapsed time is taken into account for reward calculation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_if_model_is_done&lt;/code&gt; implements a model-specific check whether a certain amount of time has been simulated. One episode is scheduled to take 24h (86400s).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; method of the Gym-Env is not implemented, since animations at arbitrary moments in time - whenever a Gym-step is finished - do not make much sense for discrete event simulation environments. The animation is controlled separately.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;info&lt;/code&gt; return value of &lt;code&gt;step&lt;/code&gt; is configured to return the number of &lt;code&gt;finished_products&lt;/code&gt; which can then be logged.&lt;/p&gt;
&lt;!-- omit in toc --&gt;
&lt;h4 id=&#34;observation---action-space&#34;&gt;Observation- &amp;amp; Action-Space&lt;/h4&gt;
&lt;p&gt;The model-specific extraction of the observation from the current model state is done by an instance of a &lt;code&gt;TuggerEnvModelStateConverter&lt;/code&gt; which implements the &lt;code&gt;ModelStateConverter&lt;/code&gt; &amp;ldquo;interface&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Specifically, the observation consists of the following information which describes the current state of the system (overall 48 values):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProductStation&lt;/code&gt; observations (5 values x 9 stations = 45 values):
&lt;ul&gt;
&lt;li&gt;current inventory-level (normalized 0-1, counted up to a limit of 10 units)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;busy&lt;/em&gt;-state (binary)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;waiting_for_material&lt;/em&gt;-state (binary)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;empty&lt;/em&gt;-state (binary, whether a product is present or not)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;blocked-by-successor&lt;/em&gt;-state (binary)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TuggerEntity&lt;/code&gt; observations (3 values x 1 tugger = 3 values):
&lt;ul&gt;
&lt;li&gt;loaded amount of &lt;code&gt;A&lt;/code&gt; (relative to capacity)&lt;/li&gt;
&lt;li&gt;loaded amount of &lt;code&gt;B&lt;/code&gt; (relative to capacity)&lt;/li&gt;
&lt;li&gt;current location (index)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that parts of a station observation can be seen to be redundant (e.g. a station which is neither &lt;em&gt;busy&lt;/em&gt; nor &lt;em&gt;waiting&lt;/em&gt; nor &lt;em&gt;empty&lt;/em&gt; can only be &lt;em&gt;blocked&lt;/em&gt;) - behind lies the rationale that an intelligent algorithm will (hopefully) learn an importance of different components of an observation, so that we do not have to worry about more than providing all potentially useful information.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;action_space&lt;/code&gt; (of type &lt;code&gt;gym.spaces.Discrete&lt;/code&gt;) consists of the 11 possible movement targets (9 stations + 2 stocks, encoded by index).&lt;/p&gt;
&lt;!-- omit in toc --&gt;
&lt;h4 id=&#34;rewards&#34;&gt;Rewards&lt;/h4&gt;
&lt;p&gt;As stated above, the defined goal of the assembly line is to achieve the best possible throughput of products, which corresponds to producing as many products as possible e.g. during one episode (24h).&lt;/p&gt;
&lt;p&gt;How do we achieve that? Which kind of incentive is suitable to stimulate such a behavior?
The design of appropriate reward functions is known to be a non-trivial matter.
In fact, the design of rewards and incentives even for (arguably more intelligent) humans is a major problem in management and education (remember the last time you studied for passing an exam instead of actually learning useful contents).&lt;/p&gt;
&lt;p&gt;For the environment at hand, we could just think about giving a single reward at the end of each episode, proportionally to the number of achieved products in that fixed amount of time (24h), which would probably properly reflect our aim of maximizing the throughput.
However, the resulting reward would be quite &lt;em&gt;sparse&lt;/em&gt; and therefore greatly decelerate learning speed (taking the average duration of a random action, each episode would take more than 1000 actions to complete before an agent sees any reward).&lt;/p&gt;
&lt;p&gt;Another idea would be to reward every successful delivery of material to any station, which would be possible to be completed within 2 steps (movement to the stock &amp;amp; movement to a suitable station consuming the loaded material).
This way we would get less sparse rewards, but also an obvious problem of exploitability, caused by the fact that the delivery of material to one station alone would actually never lead to the completion of any product at all.&lt;/p&gt;
&lt;p&gt;As a compromise, we simply decided to go for a reward of 1 everytime a product completes its final assembly step, which is possible be completed within 12 steps (minimum, not necessarily an optimal strategy).
Even exhibiting a random behavior, this would allow an agent to generate a reward of around 50 during one episode, so that there are sufficient &amp;ldquo;randomly succesful&amp;rdquo; samples to learn from.&lt;/p&gt;
&lt;p&gt;One problem with this reward comes from the fact that the simulated time needed to obtain a reward is not reflected by the reward itself.
Since every gym-step can actually eat up a greatly varying amount of simulation time (from 5 seconds to &amp;gt;100), there is a huge implicit impact on the throughput, which the agent is unaware of.
To solve this problem we introduced &amp;ldquo;costs of time&amp;rdquo;, which means we simply give a small negative reward every step, proportional to the amount of simulated time that passed.
This finally leaves us with the subsequent question of how big these &amp;ldquo;costs&amp;rdquo; should be.
If set too high, they would just overrule any of the few actual rewards at the beginning of the training.
If put too low, there would not be sufficient stimulus to exhibit time-efficient behavior at all.
Again, as a simple compromise, we implemented the costs to grow proportionally with the highest reward seen so far at the end of an episode, which guarantees a certain balance, and rewards increasing time-efficiency.&lt;/p&gt;
&lt;p&gt;The above described reward that we designed is definitely not &amp;ldquo;perfect&amp;rdquo; and also feels a bit like putting too much effort into &amp;ldquo;reward engineering&amp;rdquo; - nevertheless its a first solution our agents can hopefully work with&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;rl-agent-training--evaluation&#34;&gt;RL-Agent Training &amp;amp; Evaluation&lt;/h3&gt;
&lt;p&gt;The environment presented above is characterized by a &lt;em&gt;Discrete&lt;/em&gt; action space and a continuous (&lt;em&gt;Box&lt;/em&gt;) observations space.

&lt;a href=&#34;https://stable-baselines.readthedocs.io/en/master/guide/algos.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The stable-baselines documentation&lt;/a&gt; lists available RL algorithms and their compatibility.&lt;br&gt;
Due to the type of action space, some algorithms are not feasible (i.e. DDPG, SAC, and TD3).&lt;/p&gt;
&lt;p&gt;To train a stable-baselines RL algorithm, the &lt;code&gt;TuggerEnv&lt;/code&gt; is vectorized, using a &lt;code&gt;DummyVecEnv&lt;/code&gt; and a standard &lt;code&gt;MlpPolicy&lt;/code&gt;.
To leverage multiple CPUs for training, it can be desirable to use a &lt;code&gt;SubprocVecEnv&lt;/code&gt; (but for simpler logging &amp;amp; analysis we did not go with that one here, instead we did multiple independent training runs in parallel).&lt;/p&gt;
&lt;p&gt;Train an ACER-agent (by default for 10,000 steps only, which should take &amp;lt;1min):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up acer-training
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plot performance (might require additional setup for connecting the display):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up acer-plot-training
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tilemap-animation of the trained agent (&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up acer-web-animation-tilemap
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below we can see an ACER-agent trained for 1m steps:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;gifs/tilemap_acer_1e6.gif&#34; alt=&#34;tilemap_acer_1e6&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As we can see, the agent manages to fully load the 25 units onto the tugger most of the time, seems to target correct (A/B) stations for material unloading, and the choice of stations with a currently low inventory level seems reasonable too!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But how does the overall performance look like?&lt;/p&gt;
&lt;h3 id=&#34;performance-comparison&#34;&gt;Performance Comparison&lt;/h3&gt;
&lt;p&gt;For comparison we trained four algorithms (ACER, ACKTR, DQN, and PPO2) with standard settings for both 1 and 3 mio. (Gym-)steps.
Training took up to 2.5 hours (DQN, 3mio. steps) on a 2.9GHz Intel i9, using a single-process DummyVecEnv as explained above.&lt;br&gt;
The following graph shows the number of produced products per episode (24h) over the course of the training run for each algorithm, as well as the performance of the deterministic lowest-inventory heuristics (yellow line; always delivering a complete load of 25 units to the station with the currently lowest inventory), and the average performance of fully random actions (turquoise line, measured over 100 episodes).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;graphs/training_progress.png&#34; alt=&#34;performance-comparision-graph&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As we can see, all of the algorithms manage to increase the number of produced products per episode significantly above the level reached by random actions (turquoise line at the bottom), indicating successful learning progress.&lt;/li&gt;
&lt;li&gt;Furthermore, none of the trained algorithms reaches the performance of the lowest-inventory-heuristics (yellow line at the top).&lt;/li&gt;
&lt;li&gt;The lowest-inventory-heuristics performance reaches the estimated maximum possible throughput of the system (estimated to appr. 1080/episode). This strategy can therefore be considered to be close to a global optimum.&lt;/li&gt;
&lt;li&gt;During training, a complete breakdown in performance can occur. Most prominently: ACER_3mio. (blue line, episode 260, no recovery at all). Other algorithms show drops in performance as well but seem to recover better (e.g. ACKTR - green, PPO2 - pink).&lt;/li&gt;
&lt;li&gt;The best-performing RL algorithm (ACER trained for 1mio. steps, orange line) reached a maximum throughput of 856 products / episode (78% of the near-optimal heuristics performance).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The number of episodes varies due to the variable number of Gym-steps per episode (24h of simulated time), depending on the simulated time each Gym-step needs.
The small number of episodes of the ACER_3mio. training is explained by the up to 17277 Gym-steps per episode, occurring from episode 260 on.
Each step of such an episode takes only 5 seconds (the minimum possible time of all available Gym-steps, &amp;ldquo;achieved&amp;rdquo; by a repeated visit of the same location).
This behavior might be caused by the defined negative reward per step, proportional to the amount of simulated time the step needed.
Appearently, the agent does not remember how to generate a positive reward and only tries to maximize the short-term reward by minimizing the step-time.
Obviously this behavior does not lead to any successful delivery, let alone completion of any product.&lt;/p&gt;
&lt;p&gt;It is worth to be mentioned that all training runs were done with default algorithm settings, and that the evaluation of different hyperparameters is strongly 
&lt;a href=&#34;https://stable-baselines.readthedocs.io/en/master/guide/rl_tips.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;recommended&lt;/a&gt; for performance optimization.
Thus, it might not be improbable for an RL agent to close the performance gap towards the theoretically reachable optimum.&lt;/p&gt;
&lt;h2 id=&#34;summing-up&#34;&gt;Summing Up&lt;/h2&gt;
&lt;p&gt;Short version: Our best RL agent reached about 78% of the best possible performance inside our production-logistics environment.&lt;/p&gt;
&lt;p&gt;Ok, now is this good or bad?&lt;/p&gt;
&lt;p&gt;Well, one could be disappointed by the fact that our agent was not able to reach the performance of a hand-coded heuristics approach.&lt;br&gt;
But did we believe when we started that we could get a generic piece of code to cope with the non-trivial relations of our specific and fairly complex environment? Certainly not!&lt;br&gt;
And this was just a first shot - we did not yet start with hyperparameter tuning or the evaluation of alternative rewards.&lt;/p&gt;
&lt;p&gt;What do your experiences with reinforcement learning look like?&lt;br&gt;
Which logistics problems did you solve with RL?&lt;br&gt;
Did you spot a bug somewhere in the code or do you want to suggest an improvement?&lt;br&gt;
Or do you have questions concerning the presented implementation/toolstack?&lt;/p&gt;
&lt;p&gt;Just feel free to drop us a note, thanks for reading!&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.linkedin.com/in/wladimir-hofmann-9065a714b/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wladimir Hofmann&lt;/a&gt; - 
&lt;a href=&#34;https://www.linkedin.com/in/clemens-lennart-schwarz-609815186/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Clemens L. Schwarz&lt;/a&gt; - 
&lt;a href=&#34;https://www.linkedin.com/in/fredrik-branding-064014163/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fredrik Branding&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
